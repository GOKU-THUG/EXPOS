[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 9]=8;		//Setting the mode flag to 8

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 13]=SP;		//UPTR=SP

alias mem_page R0;
alias function_num R1;
alias userSP R2;						
alias return_addr R3;
alias child_pid R10;
alias ptbr_child R13;

userSP=SP;	

SP=[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 11]*512-1;	//SP=USERAREA PAGE	
	 
multipush(R1,R2,R3);
	
breakpoint;
	
	function_num=GET_PCB_ENTRY;
	call MOD_1;					//Process Manager
	child_pid=R0;					//Stores  the return value which contains the pid of the child process
	ptbr_child=[PROCESS_TABLE + child_pid*16 + 14];			//PTBR
	return_addr=[PTBR+2*((userSP-1)/512)]*512 + ((userSP-1)%512);
	
	
	
	if(child_pid==-1)
	then
		[return_addr]=-1;

	else
	
	    //Allocating 2 heap pages of the parent process:As it is allocated in the exception handler
	    
	    if([PTBR+4]==-1)
	    then
		    multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12,R13);
		
			R1=1;									//Get Free Page
			R2=[SYSTEM_STATUS_TABLE+1];						//Allocating heap pages for the parent process so as to share it with the child process
			call MOD_2;	                //Memory_page
			mem_page=R0;
			[PTBR+4]=mem_page;
			[PTBR+5]="1110";
		
		   if([PTBR+6]==-1)
		   then
		        R1=1;
		   	R2=[SYSTEM_STATUS_TABLE+1];						//Allocating heap pages for the parent process so as to share it with the child process
			call MOD_2;
			mem_page=R0;                //Stores the return value;
			[PTBR+6]=mem_page;
			[PTBR+7]="1110";
		   endif;
		   
		   multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12,R13);
	   endif;
	   

		
		
		
	    //CHILD PROCESS INITIALIZATIONS:2 STACK PAGES,1 USER AREA PAGE,PROCESS TABLE,PERPROCESS RESOURCE TABLE,PERPROCESS DISK MAP TABLE
		
		
		    //Allocating 2 stack pages and 1 user area page for child process
		    multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12,R13);
			
			R1=1;									//Get Free Page
			R2=child_pid;
			call MOD_2;	                //Memory_page
			mem_page=R0;								//Stack page 1 of child process
			[ptbr_child+16]=mem_page;						//Page table of stack page 1
			[ptbr_child+17]=[PTBR+17];						//Auxiliary information of stack page 1
			
			R1=1;									//Get Free Page
			R2=child_pid;
			call MOD_2;
			mem_page=R0;                						//Stack page 2 of child process
			[ptbr_child+18]=mem_page;						//Page table of stack page 2
			[ptbr_child+19]=[PTBR+19];						//Auxiliary information of stack page 2
			
			R1=1;									//Get Free Page
			R2=child_pid;
			call MOD_2;
			mem_page=R0; 
			[PROCESS_TABLE + child_pid*16 + 11]=mem_page;				//USER AREA PAGE of child process
			
		    multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12,R13);

	
		
		//PROCESS TABLE
		
		[PROCESS_TABLE + child_pid*16 + 3]=[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 3];	//USER ID
		[PROCESS_TABLE + child_pid*16 + 6]=[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 6];	//Swap Flag
		[PROCESS_TABLE + child_pid*16 + 10]=[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 10];	//User Area Swap Status
		[PROCESS_TABLE + child_pid*16 + 7]=[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 7];	//Inode Index
		[PROCESS_TABLE + child_pid*16 + 13]=[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 13];	//UPTR

		alias i R12;
		i=0;
		
		//COPYING THE USER STACK CONTENTS OF PARENT PROCESS TO CHILD PROCESS
		while(i<512)
		do
			[[ptbr_child+16]*512 + i]=[[PTBR+16]*512 + i];
			[[ptbr_child+18]*512 + i]=[[PTBR+18]*512 + i];
			
			i=i+1;
		endwhile;
		
		
		[PROCESS_TABLE + child_pid*16 + 9]=0;				//SETTING THE MODE BIT TO 0;
		[PROCESS_TABLE + child_pid*16 + 12]=0;				//KPTR
		[PROCESS_TABLE + child_pid*16 + 0]=0;				//TICK BIT
		[PROCESS_TABLE + child_pid*16 + 2]=[SYSTEM_STATUS_TABLE+1];	//PPID
		[PROCESS_TABLE + child_pid*16 + 4]=CREATED;			//State
	
		
		//USER AREA PAGE HAS BEEN SET IN THE PROCESS TABLE ABOVE DURING ALLOCATION
		
		alias offset R15;
		alias base_addr R14;
	
		base_addr=[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 11]*512;
		offset=496;
	
		//Copying the per process resource table of parent process to child process
		while(offset<=511)			//Initializing the perprocess resource table as last 16 words of the user stack are occupied by the per process resource table;
		do
			[[PROCESS_TABLE + child_pid*16 + 11]*512 + offset]=[[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 11]*512 + offset];				
			offset=offset+1;
		endwhile;
		
		
		
		//Copying the per process disk map table of parent process to child process
		i=2;
		
		while(i<=9)
		do
			if(i==8 || i==9)
			then
				[DISK_MAP_TABLE + child_pid*10 + i]=-1;
				[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE+1]*10 + i]=-1;
			else
				[DISK_MAP_TABLE + child_pid*10 + i]=[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE+1]*10 + i];
			endif;
			i=i+1;
		endwhile;
		
		
		
		
		
		//Initializing the page table of child process and Incrementing the memory free list of heap,code,stack and heap
		i=0;
		
		while(i<=15)
		do
			[ptbr_child + i]=[PTBR + i];
			[MEMORY_FREE_LIST+ [PTBR + i]]=[MEMORY_FREE_LIST+ [PTBR + i]]+1;
			
			i=i+1;
		endwhile;
		
		[[PROCESS_TABLE + child_pid*16 + 11]*512]=BP;			//Storing BP in kernel stack
		
		alias childuserSP R14;
		alias child_return_addr R12;
		
		childuserSP=[PROCESS_TABLE + child_pid*16 + 13];
		
		userSP=[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 13];
		
		return_addr=[PTBR+2*((userSP-1)/512)]*512 + ((userSP-1)%512);
		child_return_addr=[ptbr_child+2*((childuserSP-1)/512)]*512 + ((childuserSP-1)%512);
		
		[return_addr]=child_pid;
		[child_return_addr]=0;
	endif;
multipop(R1,R2,R3);

breakpoint;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 9]=0;		//Setting the mode flag to 0
SP=[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 13];		//SP=UPTR

ireturn;

