alias userSP R0;
alias descriptor_phys_pg_no R1;
alias descriptor_phy_address R2;
alias descriptor_val R3;
alias return_addr R5;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 9]=7;				//MODE BIT=7
userSP=SP;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 13]=SP;				//UPTR=SP

SP=([PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 11]*512) - 1;			//Switching to kernel stack

descriptor_phys_pg_no=[PTBR+2*((userSP-4)/512)];				
descriptor_phy_address=(descriptor_phys_pg_no*512) + ((userSP-4)%512);
descriptor_val=[descriptor_phy_address];					//File descriptor

if(descriptor_val!=-1)								

then

return_addr=([PTBR+2*((userSP-1)/512)]*512)+((userSP-1)%512);
[return_addr]=-1;								//Return Adress is -1 since,Read failed due to invalid file descriptor.

else

alias read_val R6;
read_val=[ [PTBR+2*((userSP-3)/512)]*512 + ((userSP-3)%512) ];
	
multipush(R0,R1,R2,R3,R5,R6);	

R1=TERMINAL_READ;										//Function for terminal read.
R2=[SYSTEM_STATUS_TABLE+1];							//Current Pid.
R3=read_val;									//place where the value read has to be stored to.

call MOD_4;									//Device Manager
multipop(R0,R1,R2,R3,R5,R6);

return_addr=([PTBR+2*((userSP-1)/512)]*512)+((userSP-1)%512);
[return_addr]=0;								//0 indicates success which is the return address.

endif;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 9]=0;				//Setting the mode bit back to 0;
SP=[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 13];									//Setting sp back to user stack;
ireturn;



