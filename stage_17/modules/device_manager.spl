alias function_num R1;
alias pid R2;
alias logical_addr R3;
alias physical_addr R5;

if (function_num==TERMINAL_WRITE)				//For terminal Write
then

	multipush(R1,R2,R3);

	R1=8;						//To store the function number for acquiring terminal
	R2=[SYSTEM_STATUS_TABLE+1];			//To store the current pid

	call MOD_0;					//Resource manager:Acquire terminal

	multipop(R1,R2,R3);

	print R3;					//To print the value to be printed


	multipush(R1,R2,R3);

	R1=9;						//To store the function number for acquiring terminal
	R2=[SYSTEM_STATUS_TABLE+1];			//To store the current pid

	call MOD_0;					//Resource manager:Release terminal

	alias return_value R4;				//To get the return value returned by the release terminal function;
	R4=R0;

	multipop(R1,R2,R3);
else 
	multipush(R1,R2,R3);
	breakpoint;
	R1=8;
	call MOD_0;
	
	multipop(R1,R2,R3);
	
	breakpoint;
	read;
	
	[PROCESS_TABLE + pid*16 + 4]=WAIT_TERMINAL;
	
	multipush(R1,R2,R3);
	call MOD_5;					//Scheduler Module
	multipop(R1,R2,R3);
	
	physical_addr=([PTBR + 2*(logical_addr/512)]*512) + (logical_addr%512);	//ADDRESS TRANSLATION
	[physical_addr]=[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 8];				//Word read(obtained from input buffer) is stored in R3

endif;

return;
