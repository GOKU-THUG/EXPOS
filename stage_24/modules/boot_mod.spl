//INODE USER TABLE
loadi(59,3);
loadi(60,4);

//ROOT FILE
loadi(62,5);

//DISK FREE LIST
loadi(61,2);

[TERMINAL_STATUS_TABLE]=0;				//Setting the Terminal status table to 0
[DISK_STATUS_TABLE]=0;					//Setting the Disk status table to 0

//MOD_0:RESOURCE MANAGER MODULE
loadi(40,53);
loadi(41,54);

//MOD_1:PROCESS_MANAGER MODULE
loadi(42,55);
loadi(43,56);

//MOD_2:MEMORY_MANAGER MODULE
loadi(44,57);
loadi(45,58);

//MOD_3:FILE MANAGER MODULE
loadi(46,59);
loadi(47,60);

//MOD_4:DEVICE MANAGER MODULE
loadi(48,61);
loadi(49,62);

//MOD_5:SCHEDULER MODULE
loadi(50,63);
loadi(51,64);

//LIBRARY CODE
loadi(63,13);
loadi(64,14);

//INIT Program
loadi(65,7);
loadi(66,8);

//HARDWARE INTERRUPTS:

//Timer Interrupt Handler:INT_1
loadi(4,17);
loadi(5,18);

//CONSOLE INTERRUPT:INT_2
loadi(8,21);
loadi(9,22);

//Disk Interrupt Handler:INT_3
loadi(6,19);
loadi(7,20);

//Software Interrupts

//CREATE AND DELETE FILES:INT 4
loadi(10,23);
loadi(11,24);

//OPEN AND CLOSE FILES:INT 5
loadi(12,25);
loadi(13,26);

//READ SYSTEM CALL:INT 6
loadi(14,27);
loadi(15,28);

//WRITE SYSTEM CALL:INT 7
loadi(16,29);
loadi(17,30);

//FORK SYSTEM CALL:INT 8
loadi(18,31);
loadi(19,32);

//EXEC SYSTEM CALL:INT 9
loadi(20,33);
loadi(21,34);

//Exit Interrupt handler:INT_10
loadi(22,35);
loadi(23,36);

//INT_11:GETPID,GETPPID,WAIT,SIGNAL
loadi(24,37);
loadi(25,38);

//INT_13:SEMGET,SEMRELEASE
loadi(28,41);
loadi(29,42);

//INT_14:SEMLOCK,SEMUNLOCK
loadi(30,43);
loadi(31,44);

//SHUTDOWN SYSTEM CALL:INT 15
loadi(32,45);
loadi(33,46);

//Exception Handler:
loadi(2,15);
loadi(3,16);


//Page Table of INIT PROCESS:INIT PROCESS

PTBR=PAGE_TABLE_BASE+20;
PTLR=10;

//Page(0,1):Library code
//Page(2,3):Heap Segment
//Page(4,5):Code Segment
//Page(8,9):Stack Segment

//LIBRARY CODE

[PTBR+0]=63;
[PTBR+1]="0100";

[PTBR+2]=64;
[PTBR+3]="0100";

//HEAP SEGMENT 

[PTBR+4]=78;
[PTBR+5]="0110";

[PTBR+6]=79;
[PTBR+7]="0110";

//Code Segment

[PTBR+8]=65;
[PTBR+9]="0100";

[PTBR+10]=66;
[PTBR+11]="0100";

[PTBR+12]=-1;
[PTBR+13]="0000";

[PTBR+14]=-1;
[PTBR+15]="0000";

//Stack Segment
[PTBR+16]=76;
[PTBR+17]="0110";

[PTBR+18]=77;
[PTBR+19]="0110";

//Process Table of init
alias pos R0;
pos=PROCESS_TABLE + (1*16);

[pos + 1]=1; 			//PID
[pos + 3]=1;			//User ID=1 || Root file
[pos + 4]=CREATED; 		//State
[pos + 11]=80; 			//User Area Page No
[pos + 12]=0;			//KPTR
[pos + 13]=8*512;		//UPTR	
[pos + 14]=PAGE_TABLE_BASE+20; 	//PTBR
[pos + 15]=10; 			//PTLR

//Top of user stack of init process
[76*512]=[(65*512)+1]; //Entry Point
////////////////////////////////////////
//Initializing per process resource table of init code

alias base_addr R13;
alias offset R14;

base_addr=[PROCESS_TABLE + 1*16 + 11]*512;
offset=496;
	
while(offset<=511)							//Initializing the perprocess resource table as last 16 words of the user stack are occupied by the per process resource table;
do
	[base_addr+offset]=-1;				
	offset=offset+1;
endwhile;

alias i R10;
i=0;

while(i<=9)
do
	[DISK_MAP_TABLE + 10 + i]=-1;
	i=i+1;
endwhile;

[DISK_MAP_TABLE + 10 + 4]=7;
[DISK_MAP_TABLE + 10 + 5]=8;
////////////////////////////////////////
alias process R1;
process=2;

while(process<16)
do
	[PROCESS_TABLE + (process*16)+4]=TERMINATED;	
	process=process+1;
endwhile;
////////////////////////////////////////
i=0;

while(i < 83) do
	[MEMORY_FREE_LIST + i] = 1;
	i = i + 1;
endwhile;

while(i < 128) do
	[MEMORY_FREE_LIST + i] = 0;
	i = i + 1;
endwhile;
/////////////////////////////////
[SYSTEM_STATUS_TABLE + 2]=45;   //45 PAGES ARE FREE
[SYSTEM_STATUS_TABLE + 3]=0;    //WAIT_MEM_COUNT
///////////////////////////////////////////////////
i=0;
	
while(i<MAX_SEM_COUNT)						//Finding a free entry in the semaphore table.
do	
	[SEMAPHORE_TABLE+4*i]=-1;				//Locking pid=-1;	
	[SEMAPHORE_TABLE+4*i+1]=0;				//PROCESS COUNT=0;
		
	i=i+1;
endwhile;
/////////////////////////////////////////////////
//FILE STATUS TABLE

i=0;

while(i<MAX_FILE_NUM)
do
	[FILE_STATUS_TABLE + 4*i]=-1;
	[FILE_STATUS_TABLE + 4*i + 1]=-1;
	
	i=i+1;
endwhile;
////////////////////////////////////////////////
//BUFFER TABLE

i=0;

while(i<MAX_BUFFER)
do
	[BUFFER_TABLE + 4*i]=-1;
	[BUFFER_TABLE + 4*i + 1]=0;
	[BUFFER_TABLE + 4*i + 2]=-1;
	
	i=i+1;
endwhile;
///////////////////////////////////////
//OPEN FILE TABLE

i=0;

while(i<MAX_OPENFILE_NUM)
do
	[OPEN_FILE_TABLE + 4*i]=-1;					//INODE INDEX FIELD
	[OPEN_FILE_TABLE + 4*i + 1]=0;					//OPEN FILE INSTANCE COUNT
	i=i+1;
endwhile;
///////////////////////////////////////
return;
