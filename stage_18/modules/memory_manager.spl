breakpoint;
alias function_num R1;

if(function_num==RELEASE_PAGE)         //Release Page function:LIKE RELEASE TERMINAL
then

    alias page_num R2;

    [MEMORY_FREE_LIST+page_num]=[MEMORY_FREE_LIST+page_num]-1;  //Decrement the memory free list.


    if([MEMORY_FREE_LIST+page_num]==0)                  //Increment the Mem_free_count
    then
        [SYSTEM_STATUS_TABLE + 2]=[SYSTEM_STATUS_TABLE + 2]+1;
    endif;

    alias i R3;
    i=0;
    
    while(i<16)
    do
        if([PROCESS_TABLE + i*16 + 4]==WAIT_MEM)
        then
            [PROCESS_TABLE + i*16 + 4]=READY;
        endif;
        i=i+1;
    endwhile;
	
	breakpoint;
	return;
endif;


if(function_num==GET_FREE_PAGE)         //Get Free Page function:LIKE ACQUIRE TERMINAL:MEM_FREE_COUNT,WAIT_MEM_COUNT,MEM_FREE_LIST
then

    alias pid R2;
    
    [SYSTEM_STATUS_TABLE+3]=[SYSTEM_STATUS_TABLE+3]+1;  //INCREMENTING THE WAIT_MEM_COUNT.
    
    while([SYSTEM_STATUS_TABLE+2]==0)      //if MEM_FREE_LIST IS 0
    do    
        [PROCESS_TABLE + pid*16 + 4]=WAIT_MEM;
        
        multipush(R1,R2,R3,R4);
        call MOD_5;                 //SCHEDULER MODULE;
        multipop(R1,R2,R3,R4);
    endwhile;

    [SYSTEM_STATUS_TABLE+3]=[SYSTEM_STATUS_TABLE+3]-1;  //DECREMENTING THE WAIT_MEM_COUNT.
    [SYSTEM_STATUS_TABLE+2]=[SYSTEM_STATUS_TABLE+2]-1;  //DECREMENTING THE MEM_FREE_COUNT.

    alias i R3;

    i=76;           //76-127 are available for user processes.

    while(i<128)                //Getting a free page
    do
        if([MEMORY_FREE_LIST + i]==0)
        then
            [MEMORY_FREE_LIST + i]=1;
            R0=i;
            break;
        endif;
        i=i+1;
    endwhile;

    breakpoint;
    return;
endif;


