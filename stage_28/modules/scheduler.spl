// //breakpoint
alias current_pid R0;
alias next_pid R1;
alias i R2;
current_pid=[SYSTEM_STATUS_TABLE+ 5*CORE+1];

multipush (BP);							//There is no push in spl only multipush.

[PROCESS_TABLE + (current_pid*16) + 12] = SP % PAGE_SIZE;			//KPTR
[PROCESS_TABLE + (current_pid*16) + 14] = PTBR;				//PTBR
[PROCESS_TABLE + (current_pid*16) + 15] = PTLR;				//PTLR

multipush(R0,R1,R2);
R1=ACQUIRE_SCHED_LOCK;
call ACCESS_CONTROL;
multipop(R0,R1,R2);

if(CORE==PRIMARY_CORE)
then
    if([SYSTEM_STATUS_TABLE+5]!=0)          //PAGING STATUS:IS IN SWAPPED IN OR SWAPPED OUT STATE
    then
        if([PROCESS_TABLE + 16*SWAPPER_DAEMON + 4]==WAIT_DISK)      //If Swapper Daemon is waiting for disk
        then
            next_pid=IDLE_PROCESS;
        else
            next_pid=SWAPPER_DAEMON;
        endif;
    else
        //if logout status is 1 and secondary core is not running idle2, then schedule idle[wait for core 2 to schedule idle2.
        if([SYSTEM_STATUS_TABLE + 7] == 1 && [SYSTEM_STATUS_TABLE + 6] != IDLE2_PROCESS) 
        then
            next_pid=IDLE_PROCESS;
        else
            next_pid=IDLE_PROCESS;
            i=(current_pid+1);
            
            while(i<MAX_PROC_NUM) //Neglecting the Swapper Daemon and IDLE_2 PROCESS as it is also an idle process
            do
                if(([PROCESS_TABLE+ (i*16) + 6]==0) && i!=[SYSTEM_STATUS_TABLE+6] && i!=IDLE_PROCESS && i!=SWAPPER_DAEMON && i!=IDLE2_PROCESS && ([PROCESS_TABLE + (i*16) + 4] == READY || [PROCESS_TABLE + (i*16) + 4] == CREATED))
                then
                    next_pid=i;
                    break;
                endif;

                i=i+1;
            endwhile;

            if(next_pid==IDLE_PROCESS)
            then
                i=1;

                while(i<=current_pid)
                do
                    if(([PROCESS_TABLE+ (i*16) + 6]==0) && i!=[SYSTEM_STATUS_TABLE+6] && i!=IDLE_PROCESS && i!=SWAPPER_DAEMON && i!=IDLE2_PROCESS && ([PROCESS_TABLE + (i*16) + 4] == READY || [PROCESS_TABLE + (i*16) + 4] == CREATED))
                    then
                        next_pid=i;
                        break;
                    endif;

                    i=i+1;
                endwhile;
            endif;
        endif;
    endif;

else    //SECONDARY CORE

     //if PAGING STATUS AND LOGOUT STATUS IS SET
    if([SYSTEM_STATUS_TABLE + 5] != 0 || [SYSTEM_STATUS_TABLE + 7] == 1)
    then
            next_pid=IDLE2_PROCESS;
    else
            next_pid=IDLE2_PROCESS;
            i=(current_pid+1);
            
            while(i<MAX_PROC_NUM-2) //Neglecting the Swapper Daemon and IDLE_2 PROCESS as it is also an idle process
            do
                if(([PROCESS_TABLE+ (i*16) + 6]==0) && i!=[SYSTEM_STATUS_TABLE+1] && i!=IDLE_PROCESS && i!=SWAPPER_DAEMON && i!=IDLE2_PROCESS && i!=SHELL_PROCESS && i!=LOGIN_PROCESS && ([PROCESS_TABLE + (i*16) + 4] == READY || [PROCESS_TABLE + (i*16) + 4] == CREATED))
                then
                    next_pid=i;
                    break;
                endif;

                i=i+1;
            endwhile;

            if(next_pid==IDLE2_PROCESS)
            then
                i=1;

                while(i<=current_pid)
                do
                    if(([PROCESS_TABLE+ (i*16) + 6]==0) && i!=[SYSTEM_STATUS_TABLE+1] && i!=IDLE_PROCESS && i!=SWAPPER_DAEMON && i!=IDLE2_PROCESS && i!=SHELL_PROCESS && i!=LOGIN_PROCESS && ([PROCESS_TABLE + (i*16) + 4] == READY || [PROCESS_TABLE + (i*16) + 4] == CREATED))
                    then
                        next_pid=i;
                        break;
                    endif;

                    i=i+1;
                endwhile;
            endif;
    endif;
endif;


[SYSTEM_STATUS_TABLE+5*CORE+1]=next_pid;

PTBR=[PROCESS_TABLE + (next_pid*16) + 14];
PTLR=[PROCESS_TABLE + (next_pid*16) + 15];

if([PROCESS_TABLE + (next_pid*16) + 4] == CREATED)
then

	[PROCESS_TABLE + (next_pid*16) + 4] = RUNNING;
	BP=[[PROCESS_TABLE + (next_pid*16) + 11]*PAGE_SIZE];	//BP=value at top of the kernel stack so as to restore in timer interrupt
	[PROCESS_TABLE + (next_pid*16) + 9]=0; 								        //Setting the mode flag to 0
    
    multipush(R0,R1,R2);
        R1 = RELEASE_LOCK;
        R2 = SCHED_LOCK;
        call ACCESS_CONTROL;
	multipop(R0,R1,R2);

    SP=[PROCESS_TABLE + (next_pid*16) + 13];  //SP=UPTR;
	ireturn;
endif;

[PROCESS_TABLE + (next_pid*16) + 4] = RUNNING;                          //Was earlier in ready state

multipush(R0,R1,R2);
    R1 = RELEASE_LOCK;
    R2 = SCHED_LOCK;
    call ACCESS_CONTROL;
multipop(R0,R1,R2);

SP=([PROCESS_TABLE + (next_pid*16) + 11]*PAGE_SIZE) + [PROCESS_TABLE + (next_pid*16) + 12];	//SP=kernel stack so as to restore in timer interrupt


multipop (BP);

// //breakpoint;
return;
