// //breakpoint;
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+5*CORE+1]*16) + 13]=SP;											//UPTR=SP
SP=(([PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+5*CORE+1]*16) + 11]*512)-1); 		//Pointing to the kernel stack

backup;

alias i R3;

////////////////////////////////////////////////////////////////////////////////////////
//PAGER MODULE CODE

//IF SWAPPING IS INITIATED
if([SYSTEM_STATUS_TABLE+5]==SWAP_OUT || [SYSTEM_STATUS_TABLE+5]==SWAP_IN)
then
    if(CORE==PRIMARY_CORE && [SYSTEM_STATUS_TABLE+5*CORE+1]==SWAPPER_DAEMON && [SYSTEM_STATUS_TABLE+5]==SWAP_OUT)
    then

        multipush(R1,R2,R3);
            R1=ACQUIRE_KERN_LOCK;
            call ACCESS_CONTROL;
        multipop(R1,R2,R3);

        multipush(R3);
            R1=SWAP_OUT;
            R2=[SYSTEM_STATUS_TABLE+5*CORE+1];
            call PAGER_MODULE;
        multipop(R3);

        multipush(R1,R2,R3);
            R1=RELEASE_LOCK;
            R2=KERN_LOCK;
            call ACCESS_CONTROL;
        multipop(R1,R2,R3);
    else
        if(CORE==PRIMARY_CORE && [SYSTEM_STATUS_TABLE+5*CORE+1]==SWAPPER_DAEMON && [SYSTEM_STATUS_TABLE+5]==SWAP_IN)
        then
            multipush(R1,R2,R3);
                R1=ACQUIRE_KERN_LOCK;
                call ACCESS_CONTROL;
            multipop(R1,R2,R3);
            
            multipush(R3);
                R1=SWAP_IN;
                R2=[SYSTEM_STATUS_TABLE+5*CORE+1];
                call PAGER_MODULE;
            multipop(R3);

            multipush(R1,R2,R3);
                R1=RELEASE_LOCK;
                R2=KERN_LOCK;
                call ACCESS_CONTROL;
            multipop(R1,R2,R3);
        endif;
        // else if the current process is Idle,                          
        // Swapping is ongoing, but the daemon is blocked for some disk operation and idle is being run now 
        // Skip to the end to perform context switch. 
    endif;


else
    if([SYSTEM_STATUS_TABLE+2]<MEM_LOW)         //SWAP OUT
    then
        [SYSTEM_STATUS_TABLE+5]=SWAP_OUT;           //PAGING STATUS=SWAP OUT
    
    else
        if([SYSTEM_STATUS_TABLE+4]>0)       //SWAP COUNT>0:SWAPPED OUT PROCESSES EXIST
        then
            
            i=SHELL_PROCESS+1;

            while(i<IDLE2_PROCESS)
            do
                if([PROCESS_TABLE + i*16 + 6]==1 && ([PROCESS_TABLE + i*16 + 0]>MAX_TICK || [SYSTEM_STATUS_TABLE+2]>MEM_HIGH))
                then
                    [SYSTEM_STATUS_TABLE+5]=SWAP_IN;
                    break;
                endif;
                i=i+1;
            endwhile;
        
        endif;
    
    endif;
endif;
/////////////////////////////////////////////////////////////////////////
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+5*CORE+1]*16) + 4]=READY;				//STATE:ie:Bringing the state back to ready so that in the next round this process can be executed again

//INCREMENTING THE TICK VALUE OF EVERY NONTERMINATED PROCESS
i=0;
while(i<MAX_PROC_NUM)
do
    if([PROCESS_TABLE+i*16+1]>=0)
    then
        [PROCESS_TABLE+i*16+0]=[PROCESS_TABLE+i*16+0]+1;    //Incrementing the tick field
    endif;
    i=i+1;
endwhile;


multipush(R3);
call SCHEDULER;								//SCHEDULER MODULE
multipop(R3);

restore;

SP=[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+5*CORE+1]*16 + 13];								           //SP=UPTR:To execute from where we stopped in the prev execution of the current process
[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+5*CORE+1]*16 + 9]=0;
////breakpoint;
ireturn;

