alias current_pid R0;
alias next_pid R1;
current_pid=[SYSTEM_STATUS_TABLE+1];

multipush (BP);							//There is no push in spl only multipush.

[PROCESS_TABLE + (current_pid*16) + 12] = SP % 512;			//KPTR
[PROCESS_TABLE + (current_pid*16) + 14] = PTBR;				//PTBR
[PROCESS_TABLE + (current_pid*16) + 15] = PTLR;				//PTLR

next_pid=(current_pid+1)%16;

while(next_pid!=current_pid)
do
if([PROCESS_TABLE + (next_pid*16) + 4] == READY || [PROCESS_TABLE + (next_pid*16) + 4] == CREATED)
then
	break;
endif;

next_pid=(next_pid+1)%16;

endwhile;


[SYSTEM_STATUS_TABLE+1]=next_pid;
breakpoint;

PTBR=[PROCESS_TABLE + (next_pid*16) + 14];
PTLR=[PROCESS_TABLE + (next_pid*16) + 15];
SP=([PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 11]*512) + [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 12];	//SP=kernel stack so as to restore in timer interrupt


if([PROCESS_TABLE + (next_pid*16) + 4] == CREATED)
then
[PROCESS_TABLE + (next_pid*16) + 4] = RUNNING;
SP=[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 13];  //SP=UPTR;
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 9]=0; 								        //Setting the mode flag to 0
ireturn;
endif;

[PROCESS_TABLE + (next_pid*16) + 4] = RUNNING;

multipop (BP);

return;
